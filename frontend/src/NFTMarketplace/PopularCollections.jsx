// /**
//  * This code was generated by Builder.io.
//  */
// import React, { useState } from 'react';
// import styles from './PopularCollections.module.css';

// const PopularCollections = () => {
//   const categories = ['ALL', 'Axie', 'Accessory', 'Land', 'Item', 'Rune', 'Charm', 'Material', 'Consumable'];
//   const [activeCategory, setActiveCategory] = useState('ALL');

//   const collections = [
//     { name: 'Baby Wealthy Club', items: 106, value: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/c7c6b906f13c410f37641136165451e61f8bd4af0c1deb1f99edc3d195f774b4?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//     { name: 'Baby Wealthy Club', items: 106, value: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/7f832ce42e9c4f9ff10f19af7ff2c93e4f6092bb17ab8d9e8d2525089c37ec96?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//     { name: 'Baby Wealthy Club', items: 106, value: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/5d3529c6cf9c0a09ed96abb3998dc6643e2946a4a715472a95ba9aeefc7bb302?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//     { name: 'Baby Wealthy Club', items: 106, value: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/1a979e2d9af700800c5622789b9f344d41fcde97624768d62b21e13a66ee5bbf?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//     { name: 'Baby Wealthy Club', items: 106, value: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/69ec04243bb68057c43bb3be743448e81c6fda42b3edccce6f0b61693ec8795f?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//     { name: 'Baby Wealthy Club', items: 106, value: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/13e1bc7b7ce5a282992a46483177aae84231197a56bbebf4150603af063b2cfa?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//     { name: 'Baby Wealthy Club', items: 106, value: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/d7483247e91632193f12425d70dcd43ef43ca35498d67f328b331bc5ab58f9a8?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//     { name: 'Baby Wealthy Club', items: 106, value: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/69886b02c4f618a5237f4ee83c7b94c2df96cc14a5b7917a100aa303d356b294?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//     { name: 'Baby Wealthy Club', items: 106, value: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/e9f4b7f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//     { name: 'Baby Wealthy Club', items: 106, value: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//     { name: 'Baby Wealthy Club', items: 106, value: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//     { name: 'Baby Wealthy Club', items: 106, value: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   ];

//   return (
//     <section className={styles.popularCollections}>
//       <h2 className={styles.sectionTitle}>Popular collections</h2>
//       <div className={styles.categoryFilter}>
//         {categories.map((category) => (
//           <button
//             key={category}
//             className={`${styles.filterButton} ${category === activeCategory ? styles.active : ''}`}
//             onClick={() => setActiveCategory(category)}
//           >
//             {category}
//           </button>
//         ))}
//       </div>
//       <div className={styles.collectionsGrid}>
//         {collections.map((collection, index) => (
//           <div key={index} className={styles.collectionCard}>
//             <img src={collection.image} alt={collection.name} className={styles.collectionImage} />
//             <div className={styles.collectionInfo}>
//               <h3 className={styles.collectionName}>{collection.name}</h3>
//               <p className={styles.collectionItems}>{collection.items} items</p>
//               <p className={styles.collectionValue}>{collection.value}</p>
//             </div>
//           </div>
//         ))}
//       </div>
//     </section>
//   );
// };

// export default PopularCollections;
import React, { useState, useEffect } from 'react';
import { BrowserProvider, Contract, formatEther } from 'ethers';
import styles from './PopularCollections.module.css';
import NFTMarketplaceABI from '../NFTMarketplaceABI.json'; // 请确保路径和文件名正确
import ContractAddress from '../ContractAddress.json';
import ipfs from '../ipfs';

const PopularCollections = () => {
  const categories = ['ALL', 'Axie', 'Accessory', 'Land', 'Item', 'Rune', 'Charm', 'Material', 'Consumable'];
  const [activeCategory, setActiveCategory] = useState('ALL');
  const [collections, setCollections] = useState([]);
  const [loading, setLoading] = useState(true);
  const [contract, setContract] = useState(null);

  const contractAddress = ContractAddress.address; 

  // 初始化合约实例
  useEffect(() => {
    const initializeContract = async () => {
      if (window.ethereum) {
        try {
          const provider = new BrowserProvider(window.ethereum);
          const tempContract = new Contract(contractAddress, NFTMarketplaceABI, provider);
          setContract(tempContract);
        } catch (error) {
          console.error('Error initializing contract:', error);
          alert('Failed to initialize contract.');
        }
      } else {
        alert('Please install MetaMask to use this feature.');
      }
    };

    initializeContract();
  }, [contractAddress]);

  // 从区块链获取已列出的 NFT
  const fetchListedTokens = async () => {
    if (!contract) {
      console.warn('Contract is not initialized');
      return;
    }

    try {
      const totalSupply = await contract.totalSupply();
      console.log('Total supply:', totalSupply.toString());
      const tokens = [];

      // for (let i = 1; i <= totalSupply; i++) {
      //   try {
      //     const listed = await contract.getListedToken(i);
      //     console.log(listed);
      //     // if (listed.isListed) {
      //     if (1) {
      //       const tokenId = Number(listed.tokenId);
      //       const price = formatEther(listed.price);
      //       let tokenURI = await contract.tokenURI(tokenId);

      //       // 处理 IPFS 链接
      //       if (tokenURI.startsWith('ipfs://')) {
      //         tokenURI = tokenURI.replace('ipfs://', 'https://ipfs.io/ipfs/');
      //       }

      //       // 从 tokenURI 获取元数据
      //       const response = await fetch(tokenURI);
      //       const metadata = await response.json();

      //       tokens.push({
      //         tokenId,
      //         seller: listed.seller,
      //         price,
      //         name: metadata.name || `Token #${tokenId}`,
      //         description: metadata.description || 'No description',
      //         image: metadata.image ? (metadata.image.startsWith('ipfs://') ? metadata.image.replace('ipfs://', 'https://ipfs.io/ipfs/') : metadata.image) : '',
      //         category: metadata.category || 'Uncategorized',
      //         items: metadata.items || 1,
      //         value: price,
      //       });
      //     }
      //   } catch (error) {
      //     console.error(`Error fetching data for Token ID ${i}:`, error);
      //   }
      // }
      for (let i = 1; i <= totalSupply; i++) {
        try {
          const listed = await contract.getListedToken(i);
          // console.log("Token ID:", listed.tokenId, "Type:", typeof listed.tokenId);
          // if (listed.isListed) {
          if (1) {
            const tokenId = Number(listed.tokenId);
            const price = formatEther(listed.price);
            let tokenURI = await contract.tokenURI(tokenId);
            console.log(`Token URI for Token ID ${tokenId}: ${tokenURI}`);

            // Handle IPFS URI
            const metadataURI = tokenURI;
            console.log(`Fetching metadata from URI: ${metadataURI}`);
            const stream = ipfs.cat(metadataURI);
            let data = '';

            for await (const chunk of stream) {
              data += new TextDecoder().decode(chunk);
            }
            const metadata = JSON.parse(data);
            console.log('Metadata:', metadata);
            const imageURI = `http://34.72.243.54:8080/ipfs/${metadata.image}`;
            tokens.push({
              tokenId,
              seller: listed.seller,
              price,
              name: metadata.name || `Token #${tokenId}`,
              description: metadata.description || 'No description',
              image: imageURI,
              category: metadata.category || 'Uncategorized',
              items: metadata.items || 1,
              value: price,
            });
          }
        } catch (error) {
          console.error(`Error fetching listed token for Token ID ${i}:`, error);
        }
      }
      console.log('Tokens:', tokens);


      setCollections(tokens);
      setLoading(false);

      if (tokens.length === 0) {
        console.log('No NFTs are currently listed.');
      }
    } catch (error) {
      console.error('Error fetching listed tokens:', error);
      alert('Failed to fetch listed tokens.');
      setLoading(false);
    }
  };

  // 在合约实例初始化后获取数据
  useEffect(() => {
    if (contract) {
      fetchListedTokens();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [contract]);

  // 根据选定的类别过滤集合
  const filteredCollections = collections.filter((collection) =>
    activeCategory === 'ALL' ? true : collection.category === activeCategory
  );

  return (
    <section className={styles.popularCollections}>
      <h2 className={styles.sectionTitle}>Popular Collections</h2>
      <div className={styles.categoryFilter}>
        {categories.map((category) => (
          <button
            key={category}
            className={`${styles.filterButton} ${category === activeCategory ? styles.active : ''}`}
            onClick={() => setActiveCategory(category)}
          >
            {category}
          </button>
        ))}
      </div>
      {loading ? (
        <p>Loading collections...</p>
      ) : (
        <div className={styles.collectionsGrid}>
          {filteredCollections.length === 0 ? (
            <p>No collections available for this category.</p>
          ) : (
            filteredCollections.map((collection, index) => (
              <div key={index} className={styles.collectionCard}>
                <img src={collection.image} alt={collection.name} className={styles.collectionImage} />
                <div className={styles.collectionInfo}>
                  <h3 className={styles.collectionName}>{collection.name}</h3>
                  {/* <p className={styles.collectionItems}>Token ID: {collection.tokenId}</p> */}
                  <p className={styles.collectionValue}>Price: {collection.price} ETH</p>
                </div>
              </div>
            ))
          )}
        </div>
      )}
    </section>
  );
};

export default PopularCollections;

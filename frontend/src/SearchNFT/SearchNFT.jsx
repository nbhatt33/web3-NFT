// /**
//  * This code was generated by Builder.io.
//  */
// import React from 'react';
// import styles from './SearchNFT.module.css';
// import NFTCard from './NFTCard';
// import CategoryFilter from './CategoryFilter';
// import PriceFilter from './PriceFilter';
// import TimeFilter from './TimeFilter';
// import StatusFilter from './StatusFilter';
// import Pagination from './Pagination';
// import Footer from './Footer';
// import { useSelector, useDispatch } from 'react-redux';
// import { BrowserProvider, Contract, formatEther } from 'ethers';
// import ipfs from '../ipfs';
// import { useState, useEffect } from 'react';

// const nftData = [
//   { id: 1, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/c7c6b906f13c410f37641136165451e61f8bd4af0c1deb1f99edc3d195f774b4?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 2, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/7f832ce42e9c4f9ff10f19af7ff2c93e4f6092bb17ab8d9e8d2525089c37ec96?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 3, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/5d3529c6cf9c0a09ed96abb3998dc6643e2946a4a715472a95ba9aeefc7bb302?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 4, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/1a979e2d9af700800c5622789b9f344d41fcde97624768d62b21e13a66ee5bbf?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 5, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/69ec04243bb68057c43bb3be743448e81c6fda42b3edccce6f0b61693ec8795f?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 6, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/13e1bc7b7ce5a282992a46483177aae84231197a56bbebf4150603af063b2cfa?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 7, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/d7483247e91632193f12425d70dcd43ef43ca35498d67f328b331bc5ab58f9a8?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 8, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/69886b02c4f618a5237f4ee83c7b94c2df96cc14a5b7917a100aa303d356b294?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 9, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/8cf7cb320bc4d19777bf49e58c1a93650c5a178aacf5b80b594ec9af75d9d062?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 10, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/c1bf9f9d2871d06c3a9844c4478030d14d376d0f6787fc704a95cf0e4903d3a5?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 11, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/cc4f6c3c71f56eb1e01e16f9f3264314f17d0cafddd16afdcc44c3ac6ce57247?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 12, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/d40b33203ae08ebaa368a985668085437bd592223c98f573b8aa15c0470bff22?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 13, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/c7c6b906f13c410f37641136165451e61f8bd4af0c1deb1f99edc3d195f774b4?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 14, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/7f832ce42e9c4f9ff10f19af7ff2c93e4f6092bb17ab8d9e8d2525089c37ec96?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 15, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/5d3529c6cf9c0a09ed96abb3998dc6643e2946a4a715472a95ba9aeefc7bb302?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
//   { id: 16, name: 'Baby Wealthy Club', price: '$17,625,107', image: 'https://cdn.builder.io/api/v1/image/assets/TEMP/1a979e2d9af700800c5622789b9f344d41fcde97624768d62b21e13a66ee5bbf?placeholderIfAbsent=true&apiKey=f3aaf6d180294e6db6f355070af6792c' },
// ];

// const categories = ['ALL', 'Axie', 'Accessory', 'Land', 'Item', 'Rune', 'Charm', 'Material', 'Consumable'];

// function SearchNFT() {
//   const [activeCategory, setActiveCategory] = useState('ALL');
//   const [collections, setCollections] = useState([]);
//   const [loading, setLoading] = useState(true);
//   // const [contract, setContract] = useState(null);
//   const contract = useSelector((state) => state.contract.contract);
//   const currentAccount = useSelector((state) => state.wallet.walletInfo);

//   const fetchListedTokens = async () => {
//     if (!contract) {
//       console.warn('Contract is not initialized');
//       return;
//     }

//     try {
//       const totalSupply = await contract.totalSupply();
//       // console.log('Total supply:', totalSupply.toString());
//       const tokens = [];

//       for (let i = 1; i <= totalSupply; i++) {
//         try {
//           const listed = await contract.getListedToken(i);
//           // console.log(`Token ID ${i} is listed:`, listed);
//           // console.log("Token ID:", listed.tokenId, "Type:", typeof listed.tokenId);
//           // if (listed.isListed) {
//           if (1) {
//             const tokenId = Number(listed.tokenId);
//             const price = formatEther(listed.price);
//             let tokenURI = await contract.tokenURI(tokenId);
//             // console.log(`Token URI for Token ID ${tokenId}: ${tokenURI}`);

//             // Handle IPFS URI
//             const metadataURI = tokenURI;
//             // console.log(`Fetching metadata from URI: ${metadataURI}`);
//             const stream = ipfs.cat(metadataURI);
//             let data = '';

//             for await (const chunk of stream) {
//               data += new TextDecoder().decode(chunk);
//             }
//             const metadata = JSON.parse(data);
//             // console.log('Metadata:', metadata);
//             const imageURI = `http://34.72.243.54:8080/ipfs/${metadata.image}`;
//             tokens.push({
//               tokenId,
//               seller: listed.seller,
//               price,
//               name: metadata.name || `Token #${tokenId}`,
//               description: metadata.description || 'No description',
//               image: imageURI,
//               category: metadata.category || 'Uncategorized',
//               items: metadata.items || 1,
//               value: price,
//             });
//           }
//         } catch (error) {
//           console.error(`Error fetching listed token for Token ID ${i}:`, error);
//         }
//       }
//       console.log('Tokens:', tokens);


//       setCollections(tokens);
//       console.log('Tokens:', collections);
//       setLoading(false);

//       if (tokens.length === 0) {
//         console.log('No NFTs are currently listed.');
//       }
//     } catch (error) {
//       console.error('Error fetching listed tokens:', error);
//       alert('Failed to fetch listed tokens.');
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     if (contract) {
//       fetchListedTokens();
//       console.log('Contract:', collections);
//       // console.log('Tokens:', tokens);
//     }
//     // eslint-disable-next-line react-hooks/exhaustive-deps
//   }, [contract]);


//   return (
//     <main className={styles.searchNftContainer}>
//       <section className={styles.searchSection}>
//         <h1 className={styles.searchTitle}>Search NFT</h1>
//         <div className={styles.categoryList}>
//           {categories.map((category, index) => (
//             <button key={index} className={index === 0 ? styles.activeCategory : styles.category}>
//               {category}
//             </button>
//           ))}
//         </div>
//         {/* <div className={styles.filterContainer}>
//           <CategoryFilter />
//           <PriceFilter />
//           <TimeFilter />
//           <StatusFilter />
//         </div> */}
//         <div className={styles.nftGrid}>
//           {nftData.map((nft) => (
//             <NFTCard key={nft.id} {...nft} />
//           ))}
//         </div>
//         <Pagination />
//       </section>
//       <Footer />
//     </main>
//   );
// }

// export default SearchNFT;
import React, { useState, useEffect } from 'react';
import styles from './SearchNFT.module.css';
import NFTCard from './NFTCard';
// Import other components if needed
import Footer from './Footer';
import { useSelector } from 'react-redux';
import { formatEther } from 'ethers';
import ipfs from '../ipfs'; // If you still need this

const categories = ['ALL', 'Axie', 'Accessory', 'Land', 'Item', 'Rune', 'Charm', 'Material', 'Consumable'];

function SearchNFT() {
  const [activeCategory, setActiveCategory] = useState('ALL');
  const [collections, setCollections] = useState([]);
  const [loading, setLoading] = useState(true);

  const contract = useSelector((state) => state.contract.contract);
  const currentAccount = useSelector((state) => state.wallet.walletInfo);

  const fetchListedTokens = async () => {
    if (!contract) {
      console.warn('Contract is not initialized');
      return;
    }

    try {
      const totalSupply = await contract.totalSupply();
      console.log('Total supply:', totalSupply.toString());
      const tokens = [];

      for (let i = 1; i <= totalSupply; i++) {
        try {
          const listed = await contract.getListedToken(i);
          console.log(`Token ID ${i} is listed:`, listed);
          // console.log("Token ID:", listed.tokenId, "Type:", typeof listed.tokenId);
          // if (listed.isListed) {
          if (listed.isListed) {
            const tokenId = Number(listed.tokenId);
            const price = formatEther(listed.price);
            let tokenURI = await contract.tokenURI(tokenId);
            // console.log(`Token URI for Token ID ${tokenId}: ${tokenURI}`);

            // Handle IPFS URI
            const metadataURI = tokenURI;
            // console.log(`Fetching metadata from URI: ${metadataURI}`);
            const stream = ipfs.cat(metadataURI);
            let data = '';

            for await (const chunk of stream) {
              data += new TextDecoder().decode(chunk);
            }
            const metadata = JSON.parse(data);
            // console.log('Metadata:', metadata);
            // const imageURI = `http://34.72.243.54:8080/ipfs/${metadata.image}`;
            const imageURI = metadata.image;
            tokens.push({
              tokenId,
              seller: listed.seller,
              price,
              name: metadata.name || `Token #${tokenId}`,
              description: metadata.description || 'No description',
              image: imageURI,
              category: metadata.category || 'Uncategorized',
              items: metadata.items || 1,
              value: price,
            });
          }
        } catch (error) {
          console.error(`Error fetching listed token for Token ID ${i}:`, error);
        }
      }
      // console.log('Tokens:', tokens);


      setCollections(tokens);
      setLoading(false);

      if (tokens.length === 0) {
        console.log('No NFTs are currently listed.');
      }
    } catch (error) {
      console.error('Error fetching listed tokens:', error);
      alert('Failed to fetch listed tokens.');
      setLoading(false);
    }
  };

  useEffect(() => {
    if (contract) {
      fetchListedTokens();
    }
  }, [contract]);

  useEffect(() => {
    console.log('Collections updated:', collections);
  }, [collections]);

  return (
    <main className={styles.searchNftContainer}>
      <section className={styles.searchSection}>
        <h1 className={styles.searchTitle}>Search NFT</h1>
        <div className={styles.categoryList}>
          {categories.map((category, index) => (
            <button
              key={index}
              className={activeCategory === category ? styles.activeCategory : styles.category}
              onClick={() => setActiveCategory(category)}
            >
              {category}
            </button>
          ))}
        </div>
        {/* Add filters if needed */}
        {/* <div className={styles.filterContainer}>
          <CategoryFilter />
          <PriceFilter />
          <TimeFilter />
          <StatusFilter />
        </div> */}
        {loading ? (
          <div>Loading NFTs...</div>
        ) : (
          <div className={styles.nftGrid}>
            {collections
              .filter((nft) => activeCategory === 'ALL' || nft.category === activeCategory)
              .map((nft) => (
                <NFTCard key={nft.tokenId} {...nft} />
              ))}
          </div>
        )}
        {/* <Pagination /> */}
      </section>
      <Footer />
    </main>
  );
}

export default SearchNFT;
